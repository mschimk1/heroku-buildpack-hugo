#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>
set -euf -o pipefail

BUILD_DIR=$1
CACHE_DIR=$2

compile_buildpack_dir=$(cd $(dirname $0); cd ..; pwd)
compile_buildpack_bin=$compile_buildpack_dir/bin

source $compile_buildpack_bin/common.sh

# Determine Hugo version for the app
if [ -f $BUILD_DIR/.hugo-version ]; then
  HUGO_VERSION=$(cat $BUILD_DIR/.hugo-version | sed -e "s/hugo-//")
else
  HUGO_VERSION=latest
fi

status "Hugo version $HUGO_VERSION"

if [ "$HUGO_VERSION" = "latest" ]; then
  HUGO_GITHUB_URL=https://api.github.com/repos/spf13/hugo/releases/$HUGO_VERSION
else
  HUGO_GITHUB_URL=https://api.github.com/repos/spf13/hugo/releases/tags/v$HUGO_VERSION
fi

# Hugo archive URL ( download from github)
HUGO_PACKAGE=`curl -s $HUGO_GITHUB_URL | grep -i "browser_download_url.*Linux.*64bit" | awk -F '"' '{ print $4 }'`
HUGO_FILE_NAME=`echo $HUGO_PACKAGE | awk -F"/" '{print $NF}'`

mkdir -p $CACHE_DIR
pushd $CACHE_DIR >/dev/null

# Download and unpack Hugo binaries
if [[ ! -f "$HUGO_FILE_NAME" ]]; then
  status "Downloading Hugo $HUGO_PACKAGE"
  curl $HUGO_PACKAGE -L -s -o $HUGO_FILE_NAME | indent
  tar xz -f $HUGO_FILE_NAME
fi

HUGO_BIN_PATH=$(find `tar -tzf $HUGO_FILE_NAME | head -1 | cut -f1 -d"/"` -type f -name \*hugo\*)
HUGO_BIN="${HUGO_BIN_PATH##*/}"

cp $HUGO_BIN_PATH $BUILD_DIR | indent

popd >/dev/null

set +e
status "Testing Hugo $HUGO_BIN"
$BUILD_DIR/$HUGO_BIN version >/dev/null 2>&1
if [ $? -ne 0 ]; then
  error "Hugo installation failed"
else 
  status "Hugo is ready to go"
fi
set -e

# TODO: Remove project files except public
set +u
if [[ ! -f $BUILD_DIR/boot.sh ]]; then
cat <<EOF >$BUILD_DIR/boot.sh
echo "Input port: $1"
echo "Input port: $2"
echo "Starting Hugo server on port \$PORT"
echo "Port: \$VCAP_APP_PORT"
exec ./$HUGO_BIN server --port \$PORT --appendPort false -D
EOF
fi
chmod 755 $BUILD_DIR/boot.sh